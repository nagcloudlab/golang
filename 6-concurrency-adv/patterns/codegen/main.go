package main

import (
	"flag"
	"fmt"
	"log"
	"os"
	"text/template"
	"time"

	"concurrency/patterns/codegen/templates"
)

type data struct {
	Tpl  string
	Pkg  string
	Type string
}

func main() {
	dataTpl := flag.String("tpl", "", "the template name")
	dataType := flag.String("type", "interface{}", "the built-in type for generator")
	dataPackage := flag.String("pkg", "main", "the package, the generated code belongs to")
	flag.Parse()
	d := data{
		Tpl:  *dataTpl,
		Pkg:  *dataPackage,
		Type: *dataType,
	}

	var t string
	switch d.Tpl {
	case "fanin":
		t = templates.FanInTpl
	case "repeat":
		t = templates.RepeatTpl
	case "repeatfn":
		t = templates.RepeatFnTpl
	case "take":
		t = templates.TakeTpl
	default:
		log.Fatalf("could not find: %v", d.Tpl)
	}
	header := fmt.Sprintf(
		"// Code generated by go generate; DO NOT EDIT.\n"+
			"// This file was generated by the matrix at:\n// %s\n",
		time.Now(),
	)
	t = header + t + "\n"

	tpl := template.Must(template.New(d.Tpl).Parse(t))
	file, err := os.Create(d.Tpl + "_generated.go")
	if err != nil {
		log.Fatalf("could not create file: %v", err)
	}

	err = tpl.Execute(file, d)
	if err != nil {
		log.Fatalf("could not execute template: %v", err)
	}
}
